// Generated by CoffeeScript 1.3.3
(function() {
  var utils, _timeConfig,
    _this = this;

  _timeConfig = {
    types: ["ms", "s", "m", "h", "d"],
    multiConfig: [1, 1000, 60, 60, 24]
  };

  _timeConfig.multi = _.reduce(_timeConfig.multiConfig, function(v1, v2, idx, ar) {
    v1.push((v1[idx - 1] || 1) * v2);
    return v1;
  }, []);

  utils = {
    reduceObj: function(obj, keys) {
      var key, ret, val;
      ret = {};
      for (key in obj) {
        val = obj[key];
        if (keys.indexOf(key) >= 0) {
          ret[key] = val;
        }
      }
      return ret;
    },
    randomString: function(string_length, specialLevel) {
      var chars, i, randomstring, rnum;
      if (string_length == null) {
        string_length = 5;
      }
      if (specialLevel == null) {
        specialLevel = 0;
      }
      chars = "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz";
      if (specialLevel >= 1) {
        chars += "0123456789";
      }
      if (specialLevel >= 2) {
        chars += "_-@:.";
      }
      if (specialLevel >= 3) {
        chars += "!\"§$%&/()=?*'_:;,.-#+¬”#£ﬁ^\\˜·¯˙˚«∑€®†Ω¨⁄øπ•‘æœ@∆ºª©ƒ∂‚å–…∞µ~∫√ç≈¥";
      }
      randomstring = "";
      i = 0;
      while (i < string_length) {
        rnum = Math.floor(Math.random() * chars.length);
        randomstring += chars.substring(rnum, rnum + 1);
        i++;
      }
      return randomstring;
    },
    randRange: function(lowVal, highVal) {
      return Math.floor(Math.random() * (highVal - lowVal + 1)) + lowVal;
    },
    _setPath: function(obj, path, value) {
      var delimiter, objPointer, pathSize;
      delimiter = delimiter || ".";
      if (!(path instanceof Array)) {
        path = path.split(delimiter);
      }
      pathSize = path.length;
      objPointer = obj;
      return _.each(path, (function(pathFrag, idx, arr) {
        objPointer[pathFrag] = objPointer[pathFrag] || {};
        if (idx === pathSize - 1) {
          objPointer[pathFrag] = value;
        }
        return objPointer = objPointer[pathFrag];
      }), this);
    },
    _resolvePath: function(obj, path, delimiter) {
      delimiter = delimiter || ".";
      if (!(path instanceof Array)) {
        path = path.split(delimiter);
      }
      if (path.length > 0) {
        if (obj[path[0]]) {
          if (path.length > 1) {
            return this._resolvePath(obj[path[0]], path.splice(1));
          } else {
            return obj[path[0]];
          }
        } else {
          return null;
        }
      } else {
        return null;
      }
    },
    getMilliSeconds: function(time) {
      var iType, type;
      type = time.replace(/\d+/gi, '');
      time = parseInt(time.replace(/\D+/gi, ''), 10);
      iType = _timeConfig.types.indexOf(type);
      if (iType >= 0) {
        return time * _timeConfig.multi[iType];
      } else if (isNaN(time)) {
        return null;
      } else {
        return time;
      }
    },
    generateUID: function() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = (c === "x" ? r : r & 0x3 | 0x8);
        return v.toString(16);
      });
    },
    runSeries: function(fns, callback) {
      var completed, data, iterate;
      if (fns.length === 0) {
        return callback();
      }
      completed = 0;
      data = [];
      iterate = function() {
        return fns[completed](function(results) {
          data[completed] = results;
          if (++completed === fns.length) {
            if (callback) {
              return callback(data);
            }
          } else {
            return iterate();
          }
        });
      };
      return iterate();
    },
    runParallel: function(fns, callback) {
      var completed, data, iterate, started;
      if (fns.length === 0) {
        return callback();
      }
      started = 0;
      completed = 0;
      data = [];
      iterate = function() {
        fns[started]((function(i) {
          return function(results) {
            data[i] = results;
            if (++completed === fns.length) {
              if (callback) {
                callback(data);
              }
            }
          };
        })(started));
        if (++started !== fns.length) {
          return iterate();
        }
      };
      return iterate();
    },
    extend: function() {
      var clone, copy, deep, i, isArray, isPlainObject, length, name, options, src, target;
      target = arguments[0] || {};
      i = 1;
      length = arguments.length;
      deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (typeof target !== "object" && !typeof target === "function") {
        target = {};
      }
      isArray = function(obj) {
        if (toString.call(copy) === "[object Array]") {
          return true;
        } else {
          return false;
        }
      };
      isPlainObject = function(obj) {
        var has_is_property_of_method, has_own_constructor, key, last_key;
        if (!obj || toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval) {
          return false;
        }
        has_own_constructor = hasOwnProperty.call(obj, "constructor");
        has_is_property_of_method = hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
          return false;
        }
        for (key in obj) {
          last_key = key;
        }
        return typeof last_key === "undefined" || hasOwnProperty.call(obj, last_key);
      };
      while (i < length) {
        if ((options = arguments[i]) !== null) {
          for (name in options) {
            src = target[name];
            copy = options[name];
            if (target === copy) {
              continue;
            }
            if (deep && copy && (isPlainObject(copy) || isArray(copy))) {
              clone = (src && (isPlainObject(src) || isArray(src)) ? src : (isArray(copy) ? [] : {}));
              target[name] = utils.extend(deep, clone, copy);
            } else {
              if (typeof copy !== "undefined") {
                target[name] = copy;
              }
            }
          }
        }
        i++;
      }
      return target;
    }
  };

  module.exports = utils;

}).call(this);
