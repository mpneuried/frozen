// Generated by CoffeeScript 1.3.3
(function() {
  var Vaults,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = Vaults = (function(_super) {

    __extends(Vaults, _super);

    function Vaults() {
      this.initErrors = __bind(this.initErrors, this);

      this._create = __bind(this._create, this);

      this.create = __bind(this.create, this);

      this._convertVaults = __bind(this._convertVaults, this);

      this._list = __bind(this._list, this);

      this.list = __bind(this.list, this);

      this._createRoutes = __bind(this._createRoutes, this);
      return Vaults.__super__.constructor.apply(this, arguments);
    }

    Vaults.prototype._createRoutes = function() {
      this.express.get("/vaults", this.list);
      this.express.post("/vaults", this.create);
    };

    Vaults.prototype.list = function(req, res) {
      var _q,
        _this = this;
      _q = req.query || {};
      this._list(_q, function(err, result) {
        if (err) {
          _this._error(res, err);
          return;
        }
        return _this._send(res, result);
      });
    };

    Vaults.prototype._list = function(query, cb) {
      var _this = this;
      this.glacier.ListVaults(function(err, vaults) {
        if (err) {
          cb(err);
          return;
        }
        cb(null, _this._convertVaults(vaults));
      });
    };

    Vaults.prototype._convertVaults = function(raw) {
      var marker, ret, _i, _len, _ref, _v;
      ret = [];
      marker = raw.Body.marker;
      _ref = raw.Body.VaultList;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _v = _ref[_i];
        ret.push({
          name: _v.VaultName,
          size: _v.SizeInBytes,
          created: new Date(_v.CreationDate).getTime(),
          count: _v.NumberOfArchives
        });
      }
      return ret;
    };

    Vaults.prototype.create = function(req, res) {
      var _body,
        _this = this;
      _body = req.body || {};
      this._create(_body, function(err, result) {
        if (err) {
          _this._error(res, err);
          return;
        }
        return _this._send(res, result);
      });
    };

    Vaults.prototype._create = function(body, cb) {
      var _b,
        _this = this;
      if (!body.name) {
        cb("missing-body-name");
        return;
      }
      _b = {
        VaultName: body.name
      };
      this.glacier.CreateVault(_b, function(err, vault) {
        console.log(err, vault);
        if (err) {
          cb(err);
          return;
        }
        cb(null, true);
      });
    };

    Vaults.prototype.initErrors = function() {
      return _.extend(Vaults.__super__.initErrors.apply(this, arguments), {
        "missing-body-name": [406, "To create a vault you have to add a body key `name`."]
      });
    };

    return Vaults;

  })(require("./base"));

}).call(this);
