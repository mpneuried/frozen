// Generated by CoffeeScript 1.3.3
(function() {
  var BaseRoute,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module.exports = BaseRoute = (function() {

    function BaseRoute(express, glacier) {
      this.express = express;
      this.glacier = glacier;
      this.initErrors = __bind(this.initErrors, this);

      this._error = __bind(this._error, this);

      this._send = __bind(this._send, this);

      this._allowCORS = __bind(this._allowCORS, this);

      this._createRoutes = __bind(this._createRoutes, this);

      this.ERRORS = this.initErrors();
      this._createRoutes();
      return;
    }

    BaseRoute.prototype._createRoutes = function() {};

    BaseRoute.prototype._allowCORS = function(req, res, next) {
      var headers;
      if (req.method === "OPTIONS") {
        headers = {
          "content-length": 0,
          'Access-Control-Allow-Origin': "*",
          'Access-Control-Allow-Methods': 'GET,OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type,Accept,X-Requested-With,milon-api-key',
          "access-control-max-age": 1000000000
        };
        res.send(true, headers, 204);
      }
    };

    BaseRoute.prototype._send = function(res, data) {
      if (_.isString(data)) {
        res.send(data, 200);
      } else {
        res.json(data, 200);
      }
    };

    BaseRoute.prototype._error = function(res, err, statusCode) {
      var msg, _err, _msg, _ref, _ref1;
      if (statusCode == null) {
        statusCode = 500;
      }
      if (_.isString(err)) {
        if ((this.ERRORS[err] != null) && (_ref = this.ERRORS[err], statusCode = _ref[0], msg = _ref[1], _ref)) {
          _err = {
            errorcode: err,
            message: msg
          };
          if (err.data != null) {
            _err.data = err.data;
          }
          res.json(_err, statusCode);
        } else {
          res.send(err, statusCode);
        }
      } else {
        if (err instanceof Error) {
          if (this.ERRORS[err.name] != null) {
            _ref1 = this.ERRORS[err.name], statusCode = _ref1[0], msg = _ref1[1];
            _err = {
              errorcode: err.name,
              message: msg
            };
            if (err.data != null) {
              _err.data = err.data;
            }
          } else {
            try {
              _msg = JSON.parse(err.message);
            } catch (e) {
              _msg = err.message;
            }
            _err = {
              errorcode: err.name,
              message: _msg
            };
            if (err.data != null) {
              _err.data = err.data;
            }
          }
          res.json(_err, statusCode);
        } else {
          res.json(err.toString(), statusCode);
        }
      }
    };

    BaseRoute.prototype.initErrors = function() {
      var ret;
      ret = {
        "db-error": [500, "Error thrown by db driver. Please check the logs"],
        "invalid-json": [400, "Given JSON is not valid"],
        "unexpected-error": [500, "Unexpected error."],
        "wrong-content-type": [400, "Please use the 'content-type' header with 'application/json'."],
        "missing-args": [400, "Missing FORM or JSON params. Please check the specs."]
      };
      return ret;
    };

    return BaseRoute;

  })();

}).call(this);
